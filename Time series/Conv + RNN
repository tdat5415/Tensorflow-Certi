{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Conv + RNN","provenance":[{"file_id":"https://github.com/lmoroney/dlaicourse/blob/master/TensorFlow%20In%20Practice/Course%204%20-%20S%2BP/S%2BP%20Week%204%20Lesson%201.ipynb","timestamp":1608975799540}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"zX4Kg8DUTKWO"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"view-in-github"},"source":["<a href=\"https://colab.research.google.com/github/lmoroney/dlaicourse/blob/master/TensorFlow%20In%20Practice/Course%204%20-%20S%2BP/S%2BP%20Week%204%20Lesson%201.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"]},{"cell_type":"code","metadata":{"cellView":"both","id":"D1J15Vh_1Jih","executionInfo":{"status":"ok","timestamp":1608975842494,"user_tz":-540,"elapsed":745,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}}},"source":["try:\n","  # %tensorflow_version only exists in Colab.\n","  %tensorflow_version 2.x\n","except Exception:\n","  pass\n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"BOjujz601HcS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608975844516,"user_tz":-540,"elapsed":2056,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"a988951a-babb-4fc6-e16d-78ffe13246ff"},"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","print(tf.__version__)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["2.4.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Zswl7jRtGzkk","executionInfo":{"status":"ok","timestamp":1608975845945,"user_tz":-540,"elapsed":666,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}}},"source":["def plot_series(time, series, format=\"-\", start=0, end=None):\n","    plt.plot(time[start:end], series[start:end], format)\n","    plt.xlabel(\"Time\")\n","    plt.ylabel(\"Value\")\n","    plt.grid(True)\n","\n","def trend(time, slope=0):\n","    return slope * time\n","\n","def seasonal_pattern(season_time):\n","    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n","    return np.where(season_time < 0.4,\n","                    np.cos(season_time * 2 * np.pi),\n","                    1 / np.exp(3 * season_time))\n","\n","def seasonality(time, period, amplitude=1, phase=0):\n","    \"\"\"Repeats the same pattern at each period\"\"\"\n","    season_time = ((time + phase) % period) / period\n","    return amplitude * seasonal_pattern(season_time)\n","\n","def noise(time, noise_level=1, seed=None):\n","    rnd = np.random.RandomState(seed)\n","    return rnd.randn(len(time)) * noise_level\n","\n","time = np.arange(4 * 365 + 1, dtype=\"float32\")\n","baseline = 10\n","series = trend(time, 0.1)  \n","baseline = 10\n","amplitude = 40\n","slope = 0.05\n","noise_level = 5\n","\n","# Create the series\n","series = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)\n","# Update with noise\n","series += noise(time, noise_level, seed=42)\n","\n","split_time = 1000\n","time_train = time[:split_time]\n","x_train = series[:split_time]\n","time_valid = time[split_time:]\n","x_valid = series[split_time:]\n","\n","window_size = 20\n","batch_size = 32\n","shuffle_buffer_size = 1000"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"4sTTIOCbyShY","executionInfo":{"status":"ok","timestamp":1608975847891,"user_tz":-540,"elapsed":621,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}}},"source":["def windowed_dataset(series, window_size, batch_size, shuffle_buffer):\n","    series = tf.expand_dims(series, axis=-1)\n","    ds = tf.data.Dataset.from_tensor_slices(series)\n","    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)\n","    ds = ds.flat_map(lambda w: w.batch(window_size + 1))\n","    ds = ds.shuffle(shuffle_buffer)\n","    ds = ds.map(lambda w: (w[:-1], w[1:]))\n","    return ds.batch(batch_size).prefetch(1)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"_eaAX9g_jS5W","executionInfo":{"status":"ok","timestamp":1608975848556,"user_tz":-540,"elapsed":636,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}}},"source":["def model_forecast(model, series, window_size):\n","    ds = tf.data.Dataset.from_tensor_slices(series) # shape(1461, 1)?\n","    ds = ds.window(window_size, shift=1, drop_remainder=True) # shape(1442, 20)\n","    ds = ds.flat_map(lambda w: w.batch(window_size)) # shape(1442, 20)?\n","    ds = ds.batch(32).prefetch(1) # shape(-1, 32, 20)?\n","    forecast = model.predict(ds)\n","    return forecast"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yqc2GTsps0qf","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"error","timestamp":1608975831378,"user_tz":-540,"elapsed":10032,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"c6513968-498c-462d-cae1-fd20f8b765f5"},"source":["tf.keras.backend.clear_session()\n","tf.random.set_seed(51)\n","np.random.seed(51)\n","\n","window_size = 30\n","train_set = windowed_dataset(x_train, window_size, batch_size=128, shuffle_buffer=shuffle_buffer_size)\n","\n","model = tf.keras.models.Sequential([\n","  tf.keras.layers.Conv1D(filters=32, kernel_size=5,\n","                      strides=1, padding=\"causal\",\n","                      activation=\"relu\",\n","                      input_shape=[None, 1]),\n","  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n","  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(32, return_sequences=True)),\n","  tf.keras.layers.Dense(1),\n","  tf.keras.layers.Lambda(lambda x: x * 200)\n","])\n","lr_schedule = tf.keras.callbacks.LearningRateScheduler(\n","    lambda epoch: 1e-8 * 10**(epoch / 20))\n","optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)\n","model.compile(loss=tf.keras.losses.Huber(),\n","              optimizer=optimizer,\n","              metrics=[\"mae\"])\n","history = model.fit(train_set, epochs=100, callbacks=[lr_schedule])"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/100\n","8/8 [==============================] - 7s 75ms/step - loss: 73.2144 - mae: 73.7136\n","Epoch 2/100\n","7/8 [=========================>....] - ETA: 0s - loss: 71.7124 - mae: 72.2114"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-e978fc666414>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     22\u001b[0m               \u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m               metrics=[\"mae\"])\n\u001b[0;32m---> 24\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_set\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallbacks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlr_schedule\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"MjTvASUns0qh"},"source":["plt.semilogx(history.history[\"lr\"], history.history[\"loss\"])\n","plt.axis([1e-8, 1e-4, 0, 30])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4uh-97bpLZCA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608976446662,"user_tz":-540,"elapsed":17795,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"13f276e6-2455-4e01-abe5-073153aba913"},"source":["tf.keras.backend.clear_session()\n","tf.random.set_seed(51)\n","np.random.seed(51)\n","#batch_size = 16\n","dataset = windowed_dataset(x_train, window_size, batch_size, shuffle_buffer_size)\n","\n","model = tf.keras.models.Sequential([\n","  tf.keras.layers.Conv1D(filters=32, kernel_size=3,\n","                      strides=1, padding=\"causal\",\n","                      activation=\"relu\",\n","                      input_shape=[None, 1]),\n","  tf.keras.layers.LSTM(32, return_sequences=True),\n","  tf.keras.layers.LSTM(32, return_sequences=True),\n","  tf.keras.layers.Dense(1),\n","  tf.keras.layers.Lambda(lambda x: x * 200)\n","])\n","\n","optimizer = tf.keras.optimizers.SGD(lr=1e-5, momentum=0.9)\n","model.compile(loss=tf.keras.losses.Huber(),\n","              optimizer=optimizer,\n","              metrics=[\"mae\"])\n","history = model.fit(dataset,epochs=50)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","31/31 [==============================] - 3s 7ms/step - loss: 33.8182 - mae: 34.3139\n","Epoch 2/50\n","31/31 [==============================] - 0s 7ms/step - loss: 8.8299 - mae: 9.3164\n","Epoch 3/50\n","31/31 [==============================] - 0s 7ms/step - loss: 6.7661 - mae: 7.2486\n","Epoch 4/50\n","31/31 [==============================] - 0s 7ms/step - loss: 7.4163 - mae: 7.9013\n","Epoch 5/50\n","31/31 [==============================] - 0s 8ms/step - loss: 6.1629 - mae: 6.6433\n","Epoch 6/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.8025 - mae: 6.2826\n","Epoch 7/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.5586 - mae: 6.0371\n","Epoch 8/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.4097 - mae: 5.8892\n","Epoch 9/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.4425 - mae: 5.9222\n","Epoch 10/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.1988 - mae: 5.6773\n","Epoch 11/50\n","31/31 [==============================] - 0s 6ms/step - loss: 5.2722 - mae: 5.7513\n","Epoch 12/50\n","31/31 [==============================] - 0s 6ms/step - loss: 5.1021 - mae: 5.5810\n","Epoch 13/50\n","31/31 [==============================] - 0s 6ms/step - loss: 5.1355 - mae: 5.6150\n","Epoch 14/50\n","31/31 [==============================] - 0s 6ms/step - loss: 5.0129 - mae: 5.4917\n","Epoch 15/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.0823 - mae: 5.5606\n","Epoch 16/50\n","31/31 [==============================] - 0s 7ms/step - loss: 5.0290 - mae: 5.5069\n","Epoch 17/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.9372 - mae: 5.4156\n","Epoch 18/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.8994 - mae: 5.3781\n","Epoch 19/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.8704 - mae: 5.3479\n","Epoch 20/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.8428 - mae: 5.3204\n","Epoch 21/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.8145 - mae: 5.2923\n","Epoch 22/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.8387 - mae: 5.3165\n","Epoch 23/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.7336 - mae: 5.2119\n","Epoch 24/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.8446 - mae: 5.3237\n","Epoch 25/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.8594 - mae: 5.3372\n","Epoch 26/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.8023 - mae: 5.2811\n","Epoch 27/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.6588 - mae: 5.1354\n","Epoch 28/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.6671 - mae: 5.1436\n","Epoch 29/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.6293 - mae: 5.1074\n","Epoch 30/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.6903 - mae: 5.1678\n","Epoch 31/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.5116 - mae: 4.9884\n","Epoch 32/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.5222 - mae: 4.9985\n","Epoch 33/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.7117 - mae: 5.1896\n","Epoch 34/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.7597 - mae: 5.2373\n","Epoch 35/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.5503 - mae: 5.0269\n","Epoch 36/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.4988 - mae: 4.9761\n","Epoch 37/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.5550 - mae: 5.0329\n","Epoch 38/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.4245 - mae: 4.9009\n","Epoch 39/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.4204 - mae: 4.8965\n","Epoch 40/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.4367 - mae: 4.9139\n","Epoch 41/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.5807 - mae: 5.0572\n","Epoch 42/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.4354 - mae: 4.9128\n","Epoch 43/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.4088 - mae: 4.8855\n","Epoch 44/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.4309 - mae: 4.9076\n","Epoch 45/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.5271 - mae: 5.0038\n","Epoch 46/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.4935 - mae: 4.9711\n","Epoch 47/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.4659 - mae: 4.9437\n","Epoch 48/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.6064 - mae: 5.0844\n","Epoch 49/50\n","31/31 [==============================] - 0s 6ms/step - loss: 4.4156 - mae: 4.8899\n","Epoch 50/50\n","31/31 [==============================] - 0s 7ms/step - loss: 4.3418 - mae: 4.8184\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cTakYrl5c0Z8","executionInfo":{"status":"ok","timestamp":1608976598305,"user_tz":-540,"elapsed":620,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"a21b8818-0ddb-438f-c70f-bcbeccddb37a"},"source":["model.summary()"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv1d (Conv1D)              (None, None, 32)          128       \n","_________________________________________________________________\n","lstm (LSTM)                  (None, None, 32)          8320      \n","_________________________________________________________________\n","lstm_1 (LSTM)                (None, None, 32)          8320      \n","_________________________________________________________________\n","dense (Dense)                (None, None, 1)           33        \n","_________________________________________________________________\n","lambda (Lambda)              (None, None, 1)           0         \n","=================================================================\n","Total params: 16,801\n","Trainable params: 16,801\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RJso6R2HeFez","executionInfo":{"status":"ok","timestamp":1608978016198,"user_tz":-540,"elapsed":656,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"3a16f934-708c-45e1-aa39-065e1a370c75"},"source":["# model.predict(np.array([i for i in range(window_size)]).reshape(1,1,20))\r\n","series[..., np.newaxis].shape"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1461, 1)"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"MKkic-mLdkRZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608978217106,"user_tz":-540,"elapsed":875,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"b3744fea-8472-45a9-b57a-66e686fc6122"},"source":["rnn_forecast = model_forecast(model, series[..., np.newaxis], window_size)\n","rnn_forecast = rnn_forecast[split_time - window_size:-1, -1, 0]\n","rnn_forecast.shape"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(461,)"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UfKGnGPhjN8R","executionInfo":{"status":"ok","timestamp":1608977805806,"user_tz":-540,"elapsed":634,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"ab84e57c-12ad-455a-9370-b8f0fbc106a7"},"source":["rnn_forecast.shape"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1442, 20, 1)"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"4N1toSetdnQq","colab":{"base_uri":"https://localhost:8080/","height":388},"executionInfo":{"status":"ok","timestamp":1608976105513,"user_tz":-540,"elapsed":816,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"130d5ddf-4840-4ab0-a365-6a8372130c38"},"source":["plt.figure(figsize=(10, 6))\n","plot_series(time_valid, x_valid)\n","plot_series(time_valid, rnn_forecast)"],"execution_count":8,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ULKO3JINdqkp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1608976107256,"user_tz":-540,"elapsed":621,"user":{"displayName":"# TDAT","photoUrl":"","userId":"09923204142859293024"}},"outputId":"c3d2b2f5-84f8-4eda-d654-e1c5144fac6e"},"source":["tf.keras.metrics.mean_absolute_error(x_valid, rnn_forecast).numpy()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.2967606"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"ok8LjNbbkig4"},"source":["import matplotlib.image  as mpimg\n","import matplotlib.pyplot as plt\n","\n","#-----------------------------------------------------------\n","# Retrieve a list of list results on training and test data\n","# sets for each training epoch\n","#-----------------------------------------------------------\n","mae=history.history['mae']\n","loss=history.history['loss']\n","\n","epochs=range(len(loss)) # Get number of epochs\n","\n","#------------------------------------------------\n","# Plot MAE and Loss\n","#------------------------------------------------\n","plt.plot(epochs, mae, 'r')\n","plt.plot(epochs, loss, 'b')\n","plt.title('MAE and Loss')\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend([\"MAE\", \"Loss\"])\n","\n","plt.figure()\n","\n","epochs_zoom = epochs[200:]\n","mae_zoom = mae[200:]\n","loss_zoom = loss[200:]\n","\n","#------------------------------------------------\n","# Plot Zoomed MAE and Loss\n","#------------------------------------------------\n","plt.plot(epochs_zoom, mae_zoom, 'r')\n","plt.plot(epochs_zoom, loss_zoom, 'b')\n","plt.title('MAE and Loss')\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend([\"MAE\", \"Loss\"])\n","\n","plt.figure()"],"execution_count":null,"outputs":[]}]}